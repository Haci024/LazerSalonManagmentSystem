// <auto-generated />
using System;
using Data.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.Concrete.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<string>("ForgetPasswordCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.ToTable("BodyShapingMasters");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingPacketCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Packet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SessionCount")
                        .HasColumnType("int");

                    b.Property<int?>("SessionDuration")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("BodyShapingPacketCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeactive = false,
                            Packet = "G8 Turbo",
                            SessionCount = 0,
                            SessionDuration = 0
                        },
                        new
                        {
                            Id = 2,
                            IsDeactive = false,
                            Packet = "Miostimuliyasiya",
                            SessionCount = 0,
                            SessionDuration = 0
                        },
                        new
                        {
                            Id = 3,
                            IsDeactive = false,
                            Packet = "Termoyorğan",
                            SessionCount = 0,
                            SessionDuration = 0
                        });
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingPacketsReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BodyShapingPacketCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("BodyshapingAppointmentsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BodyShapingPacketCategoryId");

                    b.HasIndex("BodyshapingAppointmentsId");

                    b.ToTable("BodyShapingPacketsReports");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingSessionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BodyShapingAppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("BodyShapingAppointmentId");

                    b.ToTable("BodyShapingSessionList");
                });

            modelBuilder.Entity("Entity.Concrete.BodyshapingAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BodyshapingMasterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BuyingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("RemaingDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ReturnMoney")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("BodyshapingMasterId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.ToTable("BodyShapingAppointments");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologFilial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CosmetologsId")
                        .HasColumnType("int");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CosmetologsId");

                    b.HasIndex("FilialId");

                    b.ToTable("CosmetologFilials");
                });

            modelBuilder.Entity("Entity.Concrete.Cosmetologs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Cosmetologs");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CosmetologId")
                        .HasColumnType("int");

                    b.Property<string>("CosmetologyDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStart")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("OutTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CosmetologId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.ToTable("CosmetologyAppointments");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("CosmetologyCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Plazmaliftinq",
                            IsDeactive = false
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Mezoterapiya",
                            IsDeactive = false
                        },
                        new
                        {
                            Id = 3,
                            CategoryName = "Plazma + Mezo",
                            IsDeactive = false
                        },
                        new
                        {
                            Id = 4,
                            CategoryName = "Lipalitik",
                            IsDeactive = false
                        },
                        new
                        {
                            Id = 5,
                            CategoryName = "Birovetializasiya",
                            IsDeactive = false
                        },
                        new
                        {
                            Id = 6,
                            CategoryName = "Dolğu",
                            IsDeactive = false
                        },
                        new
                        {
                            Id = 7,
                            CategoryName = "Botoks",
                            IsDeactive = false
                        },
                        new
                        {
                            Id = 8,
                            CategoryName = "Saplarla liftinq",
                            IsDeactive = false
                        },
                        new
                        {
                            Id = 9,
                            CategoryName = "Pilinq",
                            IsDeactive = false
                        },
                        new
                        {
                            Id = 10,
                            CategoryName = "Hicama ",
                            IsDeactive = false
                        },
                        new
                        {
                            Id = 11,
                            CategoryName = "Pirsinq",
                            IsDeactive = false
                        },
                        new
                        {
                            Id = 12,
                            CategoryName = "Üz təmizləməsi",
                            IsDeactive = false
                        });
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CosmetologyAppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("CosmetologyCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CosmetologyAppointmentId");

                    b.HasIndex("CosmetologyCategoryId");

                    b.ToTable("CosmetologyReport");
                });

            modelBuilder.Entity("Entity.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Female")
                        .HasColumnType("bit");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.Property<double>("PhoneNumber")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entity.Concrete.Filial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Filials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FilialName = "Arzum Mini Laser Studio"
                        },
                        new
                        {
                            Id = 2,
                            FilialName = "Arzum Beauty Studio"
                        },
                        new
                        {
                            Id = 3,
                            FilialName = "Arzum Estetik Studio"
                        },
                        new
                        {
                            Id = 4,
                            FilialName = "İdarə Paneli"
                        },
                        new
                        {
                            Id = 5,
                            FilialName = "Texniki Dəstək"
                        });
                });

            modelBuilder.Entity("Entity.Concrete.Income", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BuyingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IncomeDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FilialId");

                    b.HasIndex("StockId");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("Entity.Concrete.KassaActionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastOutMoneyDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OutMoneyQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FilialId");

                    b.ToTable("KassaActionLists");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Decription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EditorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EndForSecond")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<int>("ImplusCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InCompleteEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InCompleteStartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsContiued")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStart")
                        .HasColumnType("bit");

                    b.Property<int>("LazerMasterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextSessionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PriceUpdateDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("StartForSecond")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("LazerMasterId");

                    b.ToTable("LazerAppointments");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointmentReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LazerAppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("LazerCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LazerAppointmentId");

                    b.HasIndex("LazerCategoryId");

                    b.ToTable("LazerAppointmentReports");
                });

            modelBuilder.Entity("Entity.Concrete.LazerCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("LazerCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FilialId = 1,
                            IsDeactive = false,
                            Name = "Qadın",
                            Price = 0m
                        },
                        new
                        {
                            Id = 2,
                            FilialId = 1,
                            IsDeactive = false,
                            Name = " Kişi",
                            Price = 0m
                        },
                        new
                        {
                            Id = 3,
                            FilialId = 2,
                            IsDeactive = false,
                            Name = "Qadın",
                            Price = 0m
                        },
                        new
                        {
                            Id = 4,
                            FilialId = 2,
                            IsDeactive = false,
                            Name = "Kişi",
                            Price = 0m
                        },
                        new
                        {
                            Id = 5,
                            FilialId = 3,
                            IsDeactive = false,
                            Name = "Qadın",
                            Price = 0m
                        });
                });

            modelBuilder.Entity("Entity.Concrete.LazerMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("LazerMasters");
                });

            modelBuilder.Entity("Entity.Concrete.LazerMasterFilial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<int>("LazerMasterId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("LazerMasterId");

                    b.ToTable("LazerMasterFilial");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStart")
                        .HasColumnType("bit");

                    b.Property<int>("LazerMasterId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("LazerMasterId");

                    b.ToTable("LipuckaAppointments");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("LipuckaCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeactive = false,
                            Name = "Lipuçka Qadın",
                            Price = 0m
                        },
                        new
                        {
                            Id = 2,
                            IsDeactive = false,
                            Name = "Lipuçka Kişi",
                            Price = 0m
                        });
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LipuckaAppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("LipuckaCategoriesId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LipuckaAppointmentId");

                    b.HasIndex("LipuckaCategoriesId");

                    b.ToTable("LipuckaReports");
                });

            modelBuilder.Entity("Entity.Concrete.OutMoney", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SpendCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("SpendCategoryId");

                    b.ToTable("OutMoney");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStart")
                        .HasColumnType("bit");

                    b.Property<int>("LazerMasterId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("LazerMasterId");

                    b.ToTable("PirsinqAppointments");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("PirsinqCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryName = "Pirsinq Qadın",
                            IsDeactive = false,
                            Price = 0m
                        },
                        new
                        {
                            Id = 2,
                            CategoryName = "Pirsinq Kişi",
                            IsDeactive = false,
                            Price = 0m
                        });
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("PirsinqAppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("PirsinqCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PirsinqAppointmentId");

                    b.HasIndex("PirsinqCategoryId");

                    b.ToTable("PirsinqReports");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("BuyingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTimeOut")
                        .HasColumnType("bit");

                    b.Property<int>("MinuteLimit")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RemainingMinute")
                        .HasColumnType("int");

                    b.Property<DateTime>("RemainingTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ReturnMoney")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SolariumCategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("UsingMinute")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("SolariumCategoriesId");

                    b.ToTable("SolariumAppointments");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("Minute")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UsingPeriod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("SolariumCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsDeactive = false,
                            Minute = 0,
                            Name = "Günlük",
                            Price = 0m
                        },
                        new
                        {
                            Id = 2,
                            IsDeactive = false,
                            Minute = 0,
                            Name = "Aylıq",
                            Price = 0m
                        },
                        new
                        {
                            Id = 3,
                            IsDeactive = false,
                            MainCategoryId = 1,
                            Minute = 5,
                            Name = "MiniPacket",
                            Price = 5m,
                            UsingPeriod = 1
                        },
                        new
                        {
                            Id = 4,
                            IsDeactive = false,
                            MainCategoryId = 1,
                            Minute = 10,
                            Name = "MediumPacket",
                            Price = 8m,
                            UsingPeriod = 1
                        },
                        new
                        {
                            Id = 5,
                            IsDeactive = false,
                            MainCategoryId = 1,
                            Minute = 15,
                            Name = "LargePacket",
                            Price = 12m,
                            UsingPeriod = 1
                        },
                        new
                        {
                            Id = 6,
                            IsDeactive = false,
                            MainCategoryId = 1,
                            Minute = 20,
                            Name = "ExtraLarge",
                            Price = 15m,
                            UsingPeriod = 1
                        },
                        new
                        {
                            Id = 7,
                            IsDeactive = false,
                            MainCategoryId = 2,
                            Minute = 50,
                            Name = "MiniPacket",
                            Price = 20m,
                            UsingPeriod = 30
                        },
                        new
                        {
                            Id = 8,
                            IsDeactive = false,
                            MainCategoryId = 2,
                            Minute = 100,
                            Name = "MediumPacket",
                            Price = 35m,
                            UsingPeriod = 60
                        },
                        new
                        {
                            Id = 9,
                            IsDeactive = false,
                            MainCategoryId = 2,
                            Minute = 150,
                            Name = "LargePacket",
                            Price = 45m,
                            UsingPeriod = 60
                        });
                });

            modelBuilder.Entity("Entity.Concrete.SolariumUsingList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("RemainingMinute")
                        .HasColumnType("int");

                    b.Property<int>("SolariumAppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsingMinute")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("SolariumAppointmentId");

                    b.ToTable("SolariumUsingLists");
                });

            modelBuilder.Entity("Entity.Concrete.SpendCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("AutoDate")
                        .HasColumnType("bit");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.ToTable("SpendCategories");
                });

            modelBuilder.Entity("Entity.Concrete.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BuyingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RemainCount")
                        .HasColumnType("int");

                    b.Property<int>("SellingCount")
                        .HasColumnType("int");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalCount")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FilialId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "qwertyu1234",
                            Name = "Reservator",
                            NormalizedName = "RESERVATOR"
                        },
                        new
                        {
                            Id = "qwerty12345",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "qwertys123567",
                            Name = "SuperSupporter",
                            NormalizedName = "SUPERSUPPORTER"
                        },
                        new
                        {
                            Id = "qwertys123",
                            Name = "Supporter",
                            NormalizedName = "SUPPORTER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entity.Concrete.AppUser", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("AppUser")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingMaster", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("BodyShapingMasters")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingPacketCategory", b =>
                {
                    b.HasOne("Entity.Concrete.BodyShapingPacketCategory", "MainCategory")
                        .WithMany("ChildCategory")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingPacketsReports", b =>
                {
                    b.HasOne("Entity.Concrete.BodyShapingPacketCategory", "BodyShapingPackets")
                        .WithMany("BodyShapingPacketsReports")
                        .HasForeignKey("BodyShapingPacketCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.BodyshapingAppointment", "BodyshapingAppointments")
                        .WithMany("BodyShapingPacketReports")
                        .HasForeignKey("BodyshapingAppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyShapingPackets");

                    b.Navigation("BodyshapingAppointments");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingSessionList", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("BodyshapingSessionList")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.BodyshapingAppointment", "BodyShapingAppointment")
                        .WithMany("BodyShapingSessionLists")
                        .HasForeignKey("BodyShapingAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("BodyShapingAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.BodyshapingAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("BodyshapingAppointments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.BodyShapingMaster", "BodyShapingMaster")
                        .WithMany("BodyShapingAppointment")
                        .HasForeignKey("BodyshapingMasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customer", "Customer")
                        .WithMany("BodyshapingAppointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("BodyShapingAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("BodyShapingMaster");

                    b.Navigation("Customer");

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologFilial", b =>
                {
                    b.HasOne("Entity.Concrete.Cosmetologs", "Cosmetologs")
                        .WithMany("CosmetologsFilial")
                        .HasForeignKey("CosmetologsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filials")
                        .WithMany("CosmetologFilial")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cosmetologs");

                    b.Navigation("Filials");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("CosmetologyAppointments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Cosmetologs", "Cosmetolog")
                        .WithMany("CosmetologAppointments")
                        .HasForeignKey("CosmetologId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customer", "Customers")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("CosmetologyAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Cosmetolog");

                    b.Navigation("Customers");

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyCategory", b =>
                {
                    b.HasOne("Entity.Concrete.CosmetologyCategory", "MainCategory")
                        .WithMany("ChildCategory")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyReport", b =>
                {
                    b.HasOne("Entity.Concrete.CosmetologyAppointment", "CosmetologyAppointment")
                        .WithMany("CosmetologyReports")
                        .HasForeignKey("CosmetologyAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.CosmetologyCategory", "CosmetologyCategory")
                        .WithMany("CosmetologyReports")
                        .HasForeignKey("CosmetologyCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CosmetologyAppointment");

                    b.Navigation("CosmetologyCategory");
                });

            modelBuilder.Entity("Entity.Concrete.Customer", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("Customer")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.Income", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("Incomes")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("Income")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Stock", "Stock")
                        .WithMany("Incomes")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Filial");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Entity.Concrete.KassaActionList", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("KassaActionList")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("LazerAppointments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customer", "Customers")
                        .WithMany("LazerAppointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("LazerAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.LazerMaster", "LazerMaster")
                        .WithMany("LazerAppointment")
                        .HasForeignKey("LazerMasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customers");

                    b.Navigation("Filial");

                    b.Navigation("LazerMaster");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointmentReports", b =>
                {
                    b.HasOne("Entity.Concrete.LazerAppointment", "LazerAppointment")
                        .WithMany("LazerAppointmentReports")
                        .HasForeignKey("LazerAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.LazerCategory", "LazerCategory")
                        .WithMany("LazerAppointmentReports")
                        .HasForeignKey("LazerCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LazerAppointment");

                    b.Navigation("LazerCategory");
                });

            modelBuilder.Entity("Entity.Concrete.LazerCategory", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("LazerCategories")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.LazerCategory", "MainCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("Filial");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.LazerMasterFilial", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("LazerMasterFilials")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.LazerMaster", "LazerMaster")
                        .WithMany("LazerMasterFilial")
                        .HasForeignKey("LazerMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");

                    b.Navigation("LazerMaster");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("LipuckaAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.LazerMaster", "LazerMaster")
                        .WithMany()
                        .HasForeignKey("LazerMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customer");

                    b.Navigation("Filial");

                    b.Navigation("LazerMaster");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaCategories", b =>
                {
                    b.HasOne("Entity.Concrete.LipuckaCategories", "MainCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaReports", b =>
                {
                    b.HasOne("Entity.Concrete.LipuckaAppointment", "LipuckaAppointment")
                        .WithMany("LipuckaReports")
                        .HasForeignKey("LipuckaAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.LipuckaCategories", "LipuckaCategories")
                        .WithMany()
                        .HasForeignKey("LipuckaCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LipuckaAppointment");

                    b.Navigation("LipuckaCategories");
                });

            modelBuilder.Entity("Entity.Concrete.OutMoney", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("OutMoney")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.SpendCategory", "SpendCategory")
                        .WithMany()
                        .HasForeignKey("SpendCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("SpendCategory");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("PirsinqAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.LazerMaster", "LazerMaster")
                        .WithMany()
                        .HasForeignKey("LazerMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customer");

                    b.Navigation("Filial");

                    b.Navigation("LazerMaster");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqCategory", b =>
                {
                    b.HasOne("Entity.Concrete.PirsinqCategory", "MainCategory")
                        .WithMany("ChildCategory")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqReports", b =>
                {
                    b.HasOne("Entity.Concrete.PirsinqAppointment", "PirsinqAppointment")
                        .WithMany("PirsinqReports")
                        .HasForeignKey("PirsinqAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.PirsinqCategory", "PirsinqCategory")
                        .WithMany("PirsinqReports")
                        .HasForeignKey("PirsinqCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PirsinqAppointment");

                    b.Navigation("PirsinqCategory");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("SolariumAppointments")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customer", "Customer")
                        .WithMany("SolariumAppointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("SolariumAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.SolariumCategories", "SolariumCategories")
                        .WithMany("SolariumAppointment")
                        .HasForeignKey("SolariumCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customer");

                    b.Navigation("Filial");

                    b.Navigation("SolariumCategories");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumCategories", b =>
                {
                    b.HasOne("Entity.Concrete.SolariumCategories", "MainCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumUsingList", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany("SolariumUsingList")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.SolariumAppointment", "SolariumAppointment")
                        .WithMany("SolariumUsingList")
                        .HasForeignKey("SolariumAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("SolariumAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.SpendCategory", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("SpendCategory")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.Stock", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("Stock")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Concrete.AppUser", b =>
                {
                    b.Navigation("BodyshapingAppointments");

                    b.Navigation("BodyshapingSessionList");

                    b.Navigation("CosmetologyAppointments");

                    b.Navigation("Incomes");

                    b.Navigation("LazerAppointments");

                    b.Navigation("OutMoney");

                    b.Navigation("SolariumAppointments");

                    b.Navigation("SolariumUsingList");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingMaster", b =>
                {
                    b.Navigation("BodyShapingAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingPacketCategory", b =>
                {
                    b.Navigation("BodyShapingPacketsReports");

                    b.Navigation("ChildCategory");
                });

            modelBuilder.Entity("Entity.Concrete.BodyshapingAppointment", b =>
                {
                    b.Navigation("BodyShapingPacketReports");

                    b.Navigation("BodyShapingSessionLists");
                });

            modelBuilder.Entity("Entity.Concrete.Cosmetologs", b =>
                {
                    b.Navigation("CosmetologAppointments");

                    b.Navigation("CosmetologsFilial");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyAppointment", b =>
                {
                    b.Navigation("CosmetologyReports");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyCategory", b =>
                {
                    b.Navigation("ChildCategory");

                    b.Navigation("CosmetologyReports");
                });

            modelBuilder.Entity("Entity.Concrete.Customer", b =>
                {
                    b.Navigation("BodyshapingAppointments");

                    b.Navigation("LazerAppointments");

                    b.Navigation("SolariumAppointments");
                });

            modelBuilder.Entity("Entity.Concrete.Filial", b =>
                {
                    b.Navigation("AppUser");

                    b.Navigation("BodyShapingAppointments");

                    b.Navigation("BodyShapingMasters");

                    b.Navigation("CosmetologFilial");

                    b.Navigation("CosmetologyAppointments");

                    b.Navigation("Customer");

                    b.Navigation("Income");

                    b.Navigation("KassaActionList");

                    b.Navigation("LazerAppointments");

                    b.Navigation("LazerCategories");

                    b.Navigation("LazerMasterFilials");

                    b.Navigation("LipuckaAppointments");

                    b.Navigation("PirsinqAppointments");

                    b.Navigation("SolariumAppointments");

                    b.Navigation("SpendCategory");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointment", b =>
                {
                    b.Navigation("LazerAppointmentReports");
                });

            modelBuilder.Entity("Entity.Concrete.LazerCategory", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("LazerAppointmentReports");
                });

            modelBuilder.Entity("Entity.Concrete.LazerMaster", b =>
                {
                    b.Navigation("LazerAppointment");

                    b.Navigation("LazerMasterFilial");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaAppointment", b =>
                {
                    b.Navigation("LipuckaReports");
                });

            modelBuilder.Entity("Entity.Concrete.LipuckaCategories", b =>
                {
                    b.Navigation("ChildCategories");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqAppointment", b =>
                {
                    b.Navigation("PirsinqReports");
                });

            modelBuilder.Entity("Entity.Concrete.PirsinqCategory", b =>
                {
                    b.Navigation("ChildCategory");

                    b.Navigation("PirsinqReports");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumAppointment", b =>
                {
                    b.Navigation("SolariumUsingList");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumCategories", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("SolariumAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.Stock", b =>
                {
                    b.Navigation("Incomes");
                });
#pragma warning restore 612, 618
        }
    }
}
