// <auto-generated />
using System;
using Data.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entity.Concrete.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<string>("ForgetPasswordCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BodyShapingMasterId")
                        .HasColumnType("int");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeactive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BodyShapingMasterId");

                    b.HasIndex("FilialId");

                    b.ToTable("BodyShapingMasters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FilialId = 2,
                            FullName = "Arifə",
                            IsDeactive = false
                        });
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingPacketCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Packet")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("SessionCount")
                        .HasColumnType("int");

                    b.Property<int?>("SessionDuration")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("BodyShapingPacketCategory");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingPacketsReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BodyShapingPacketCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("BodyshapingAppointmentsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BodyShapingPacketCategoryId");

                    b.HasIndex("BodyshapingAppointmentsId");

                    b.ToTable("BodyShapingPacketsReports");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingSessionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BodyShapingAppointmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SessionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BodyShapingAppointmentId");

                    b.ToTable("BodyShapingSessionList");
                });

            modelBuilder.Entity("Entity.Concrete.BodyshapingAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BodyshapingMasterId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BuyingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BodyshapingMasterId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.ToTable("BodyshapingAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.Cosmetologs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.ToTable("Cosmetologs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FilialId = 2,
                            FullName = "Nuray"
                        });
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CosmetologId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("FilialId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OutTime")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CosmetologId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.ToTable("CosmetologyAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Female")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("PhoneNumber")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Entity.Concrete.Filial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FilialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Filials");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FilialName = "Arzum Mini Lazer Studio"
                        },
                        new
                        {
                            Id = 2,
                            FilialName = "Arzum Beauty Studio"
                        },
                        new
                        {
                            Id = 3,
                            FilialName = "Arzum Estetik Studio"
                        },
                        new
                        {
                            Id = 4,
                            FilialName = "İdarə Paneli"
                        });
                });

            modelBuilder.Entity("Entity.Concrete.Income", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IncomeDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FilialId");

                    b.HasIndex("StockId");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("Entity.Concrete.Kassa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.ToTable("Budget");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Budget = 0m,
                            FilialId = 1
                        },
                        new
                        {
                            Id = 2,
                            Budget = 0m,
                            FilialId = 2
                        },
                        new
                        {
                            Id = 3,
                            Budget = 0m,
                            FilialId = 3
                        });
                });

            modelBuilder.Entity("Entity.Concrete.KassaActionList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("KassaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastOutMoneyDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OutMoneyQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("KassaId");

                    b.ToTable("KassaActionLists");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("Decription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EndForSecond")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<int>("ImplusCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InCompleteEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InCompleteStartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsContiued")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStart")
                        .HasColumnType("bit");

                    b.Property<int>("LazerMasterId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("NextSessionDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PriceUpdateDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReservationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("StartForSecond")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("LazerMasterId");

                    b.ToTable("LazerAppointments");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointmentReports", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LazerAppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("LazerCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LazerAppointmentId");

                    b.HasIndex("LazerCategoryId");

                    b.ToTable("LazerAppointmentReports");
                });

            modelBuilder.Entity("Entity.Concrete.LazerCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("LazerCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Lazer Mini Qadınlar üçün",
                            Price = 0m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Lazer Mini Kişilər üçün",
                            Price = 0m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Lazer Beauty Qadınlar üçün",
                            Price = 0m
                        },
                        new
                        {
                            Id = 4,
                            Name = "Lazer Beauty Kişilər  üçün",
                            Price = 0m
                        },
                        new
                        {
                            Id = 5,
                            Name = "Lazer Qadınlar üçün Estetik Salon",
                            Price = 0m
                        },
                        new
                        {
                            Id = 6,
                            MainCategoryId = 1,
                            Name = "Bütün bədən",
                            Price = 40m
                        },
                        new
                        {
                            Id = 7,
                            MainCategoryId = 1,
                            Name = "Sadə bədən",
                            Price = 35m
                        },
                        new
                        {
                            Id = 8,
                            MainCategoryId = 1,
                            Name = "Sinə & Qarın",
                            Price = 20m
                        },
                        new
                        {
                            Id = 9,
                            MainCategoryId = 1,
                            Name = "Kürək & Bel",
                            Price = 20m
                        },
                        new
                        {
                            Id = 10,
                            MainCategoryId = 1,
                            Name = "Bütün qol",
                            Price = 15m
                        },
                        new
                        {
                            Id = 11,
                            MainCategoryId = 1,
                            Name = "Qolaltı",
                            Price = 5m
                        },
                        new
                        {
                            Id = 12,
                            MainCategoryId = 1,
                            Name = "Üz",
                            Price = 5m
                        },
                        new
                        {
                            Id = 13,
                            MainCategoryId = 1,
                            Name = "Dodaqüstü",
                            Price = 2m
                        },
                        new
                        {
                            Id = 14,
                            MainCategoryId = 1,
                            Name = "Çənə",
                            Price = 3m
                        },
                        new
                        {
                            Id = 15,
                            MainCategoryId = 1,
                            Name = "Arxayan",
                            Price = 10m
                        },
                        new
                        {
                            Id = 16,
                            MainCategoryId = 1,
                            Name = "Bikini",
                            Price = 10m
                        },
                        new
                        {
                            Id = 17,
                            MainCategoryId = 1,
                            Name = "Bütün ayaq",
                            Price = 20m
                        },
                        new
                        {
                            Id = 18,
                            MainCategoryId = 2,
                            Name = "Yarı bədən",
                            Price = 50m
                        },
                        new
                        {
                            Id = 19,
                            MainCategoryId = 2,
                            Name = "Üz & Boyun & Boğaz",
                            Price = 10m
                        },
                        new
                        {
                            Id = 20,
                            MainCategoryId = 2,
                            Name = "Üz",
                            Price = 5m
                        },
                        new
                        {
                            Id = 21,
                            MainCategoryId = 2,
                            Name = "Boyun",
                            Price = 5m
                        },
                        new
                        {
                            Id = 22,
                            MainCategoryId = 2,
                            Name = "Boğaz",
                            Price = 5m
                        },
                        new
                        {
                            Id = 23,
                            MainCategoryId = 2,
                            Name = "Yanaq",
                            Price = 5m
                        },
                        new
                        {
                            Id = 24,
                            MainCategoryId = 2,
                            Name = "Qulaq",
                            Price = 3m
                        },
                        new
                        {
                            Id = 25,
                            MainCategoryId = 2,
                            Name = "Bütün qol",
                            Price = 25m
                        },
                        new
                        {
                            Id = 26,
                            MainCategoryId = 2,
                            Name = "Çiyin",
                            Price = 10m
                        },
                        new
                        {
                            Id = 27,
                            MainCategoryId = 2,
                            Name = "Qolaltı",
                            Price = 5m
                        },
                        new
                        {
                            Id = 28,
                            MainCategoryId = 2,
                            Name = "Kürək & Bel",
                            Price = 30m
                        },
                        new
                        {
                            Id = 29,
                            MainCategoryId = 2,
                            Name = "Sinə & Qarın",
                            Price = 30m
                        },
                        new
                        {
                            Id = 30,
                            MainCategoryId = 3,
                            Name = "Bütün bədən",
                            Price = 40m
                        },
                        new
                        {
                            Id = 31,
                            MainCategoryId = 3,
                            Name = "Sadə bədən",
                            Price = 35m
                        },
                        new
                        {
                            Id = 32,
                            MainCategoryId = 3,
                            Name = "Sinə & Qarın",
                            Price = 20m
                        },
                        new
                        {
                            Id = 33,
                            MainCategoryId = 3,
                            Name = "Kürək & Bel",
                            Price = 20m
                        },
                        new
                        {
                            Id = 34,
                            MainCategoryId = 4,
                            Name = "Bütün qol",
                            Price = 15m
                        },
                        new
                        {
                            Id = 35,
                            MainCategoryId = 4,
                            Name = "Qolaltı",
                            Price = 5m
                        },
                        new
                        {
                            Id = 36,
                            MainCategoryId = 4,
                            Name = "Üz",
                            Price = 5m
                        },
                        new
                        {
                            Id = 37,
                            MainCategoryId = 4,
                            Name = "Dodaqüstü",
                            Price = 2m
                        },
                        new
                        {
                            Id = 38,
                            MainCategoryId = 4,
                            Name = "Çənə",
                            Price = 3m
                        },
                        new
                        {
                            Id = 39,
                            MainCategoryId = 4,
                            Name = "Arxayan",
                            Price = 10m
                        },
                        new
                        {
                            Id = 40,
                            MainCategoryId = 4,
                            Name = "Bikini",
                            Price = 10m
                        },
                        new
                        {
                            Id = 41,
                            MainCategoryId = 4,
                            Name = "Bütün ayaq",
                            Price = 20m
                        },
                        new
                        {
                            Id = 42,
                            MainCategoryId = 4,
                            Name = "Yarı bədən",
                            Price = 50m
                        },
                        new
                        {
                            Id = 43,
                            MainCategoryId = 5,
                            Name = "Üz & Boyun & Boğaz",
                            Price = 10m
                        },
                        new
                        {
                            Id = 44,
                            MainCategoryId = 5,
                            Name = "Üz",
                            Price = 5m
                        },
                        new
                        {
                            Id = 45,
                            MainCategoryId = 5,
                            Name = "Boyun",
                            Price = 5m
                        },
                        new
                        {
                            Id = 46,
                            MainCategoryId = 5,
                            Name = "Boğaz",
                            Price = 5m
                        },
                        new
                        {
                            Id = 47,
                            MainCategoryId = 5,
                            Name = "Yanaq",
                            Price = 5m
                        },
                        new
                        {
                            Id = 48,
                            MainCategoryId = 5,
                            Name = "Qulaq",
                            Price = 3m
                        },
                        new
                        {
                            Id = 49,
                            MainCategoryId = 5,
                            Name = "Bütün qol",
                            Price = 25m
                        },
                        new
                        {
                            Id = 50,
                            MainCategoryId = 5,
                            Name = "Çiyin",
                            Price = 10m
                        },
                        new
                        {
                            Id = 51,
                            MainCategoryId = 5,
                            Name = "Qolaltı",
                            Price = 5m
                        },
                        new
                        {
                            Id = 52,
                            MainCategoryId = 5,
                            Name = "Kürək & Bel",
                            Price = 30m
                        },
                        new
                        {
                            Id = 53,
                            MainCategoryId = 5,
                            Name = "Sinə & Qarın",
                            Price = 30m
                        });
                });

            modelBuilder.Entity("Entity.Concrete.LazerMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FilialId");

                    b.ToTable("LazerMasters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FilialId = 1,
                            FullName = "Ellada"
                        },
                        new
                        {
                            Id = 2,
                            FilialId = 1,
                            FullName = "Aidə"
                        },
                        new
                        {
                            Id = 3,
                            FilialId = 2,
                            FullName = "Ellada"
                        },
                        new
                        {
                            Id = 4,
                            FilialId = 2,
                            FullName = "Nuridə"
                        },
                        new
                        {
                            Id = 5,
                            FilialId = 3,
                            FullName = "Gülnar"
                        },
                        new
                        {
                            Id = 6,
                            FilialId = 3,
                            FullName = "Nəzrin"
                        });
                });

            modelBuilder.Entity("Entity.Concrete.OutMoney", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FilialId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Product")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FilialId");

                    b.ToTable("OutMoney");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumAppointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BuyingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<int>("MinuteLimit")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("RemainingMinute")
                        .HasColumnType("int");

                    b.Property<int>("SolariumCategoriesId")
                        .HasColumnType("int");

                    b.Property<int>("UsingMinute")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FilialId");

                    b.HasIndex("SolariumCategoriesId");

                    b.ToTable("SolariumAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumCategories", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("MainCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("Minute")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UsingPeriod")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainCategoryId");

                    b.ToTable("SolariumCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Minute = 0,
                            Name = "Günlük",
                            Price = 0m
                        },
                        new
                        {
                            Id = 2,
                            Minute = 0,
                            Name = "Aylıq",
                            Price = 0m
                        },
                        new
                        {
                            Id = 3,
                            MainCategoryId = 1,
                            Minute = 5,
                            Name = "MiniPacket",
                            Price = 4m,
                            UsingPeriod = 1
                        },
                        new
                        {
                            Id = 4,
                            MainCategoryId = 1,
                            Minute = 10,
                            Name = "MediumPacket",
                            Price = 8m,
                            UsingPeriod = 1
                        },
                        new
                        {
                            Id = 5,
                            MainCategoryId = 1,
                            Minute = 15,
                            Name = "LargePacket",
                            Price = 12m,
                            UsingPeriod = 1
                        },
                        new
                        {
                            Id = 6,
                            MainCategoryId = 1,
                            Minute = 20,
                            Name = "ExtraLarge",
                            Price = 16m,
                            UsingPeriod = 30
                        },
                        new
                        {
                            Id = 7,
                            MainCategoryId = 2,
                            Minute = 30,
                            Name = "MiniPacket",
                            Price = 19m,
                            UsingPeriod = 30
                        },
                        new
                        {
                            Id = 8,
                            MainCategoryId = 2,
                            Minute = 40,
                            Name = "MediumPacket",
                            Price = 29m,
                            UsingPeriod = 30
                        },
                        new
                        {
                            Id = 9,
                            MainCategoryId = 2,
                            Minute = 50,
                            Name = "LargePacket",
                            Price = 39m,
                            UsingPeriod = 60
                        });
                });

            modelBuilder.Entity("Entity.Concrete.SolariumUsingList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("RemainingMinute")
                        .HasColumnType("int");

                    b.Property<int>("SolariumAppointmentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UsingDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UsingMinute")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SolariumAppointmentId");

                    b.ToTable("SolariumUsingList");
                });

            modelBuilder.Entity("Entity.Concrete.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("BuyingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FilialId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("SellingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("FilialId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "qwertyu1234",
                            Name = "Qeydiyyatçı",
                            NormalizedName = "QEYDİYYATÇI"
                        },
                        new
                        {
                            Id = "qwerty12345",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "qwertys123567",
                            Name = "SuperSupporter",
                            NormalizedName = "SUPERSUPPORTER"
                        },
                        new
                        {
                            Id = "qwertys123",
                            Name = "Supporter",
                            NormalizedName = "SUPPORTER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entity.Concrete.AppUser", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("AppUser")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingMaster", b =>
                {
                    b.HasOne("Entity.Concrete.BodyShapingMaster", null)
                        .WithMany("Masters")
                        .HasForeignKey("BodyShapingMasterId");

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("BodyShapingMasters")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingPacketCategory", b =>
                {
                    b.HasOne("Entity.Concrete.BodyShapingPacketCategory", "MainCategory")
                        .WithMany("ChildCategory")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingPacketsReports", b =>
                {
                    b.HasOne("Entity.Concrete.BodyShapingPacketCategory", "BodyShapingPackets")
                        .WithMany("BodyShapingPacketsReports")
                        .HasForeignKey("BodyShapingPacketCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.BodyshapingAppointment", "BodyshapingAppointments")
                        .WithMany("BodyShapingPacketReports")
                        .HasForeignKey("BodyshapingAppointmentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyShapingPackets");

                    b.Navigation("BodyshapingAppointments");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingSessionList", b =>
                {
                    b.HasOne("Entity.Concrete.BodyshapingAppointment", "BodyShapingAppointment")
                        .WithMany("BodyShapingSessionLists")
                        .HasForeignKey("BodyShapingAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BodyShapingAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.BodyshapingAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.BodyShapingMaster", "BodyShapingMaster")
                        .WithMany()
                        .HasForeignKey("BodyshapingMasterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customer", "Customer")
                        .WithMany("BodyshapingAppointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("BodyShapingAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BodyShapingMaster");

                    b.Navigation("Customer");

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.Cosmetologs", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("CosmetologyAppointment")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.CosmetologyAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.Cosmetologs", "Cosmetolog")
                        .WithMany("CosmetologAppointments")
                        .HasForeignKey("CosmetologId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customer", "Customers")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", null)
                        .WithMany("CosmetologyAppointments")
                        .HasForeignKey("FilialId");

                    b.Navigation("Cosmetolog");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Entity.Concrete.Income", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("Income")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Stock", "Stock")
                        .WithMany("Incomes")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Filial");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Entity.Concrete.Kassa", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("Kassa")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.KassaActionList", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Kassa", "Kassa")
                        .WithMany("KassaActionLists")
                        .HasForeignKey("KassaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Kassa");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Customer", "Customers")
                        .WithMany("LazerAppointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("LazerAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.LazerMaster", "LazerMaster")
                        .WithMany("LazerAppointment")
                        .HasForeignKey("LazerMasterId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Customers");

                    b.Navigation("Filial");

                    b.Navigation("LazerMaster");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointmentReports", b =>
                {
                    b.HasOne("Entity.Concrete.LazerAppointment", "LazerAppointment")
                        .WithMany("LazerAppointmentReports")
                        .HasForeignKey("LazerAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.LazerCategory", "LazerCategory")
                        .WithMany("LazerAppointmentReports")
                        .HasForeignKey("LazerCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LazerAppointment");

                    b.Navigation("LazerCategory");
                });

            modelBuilder.Entity("Entity.Concrete.LazerCategory", b =>
                {
                    b.HasOne("Entity.Concrete.LazerCategory", "MainCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.LazerMaster", b =>
                {
                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("LazerMasters")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.OutMoney", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("OutMoney")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumAppointment", b =>
                {
                    b.HasOne("Entity.Concrete.Customer", "Customer")
                        .WithMany("SolariumAppointments")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("SolariumAppointments")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.SolariumCategories", "SolariumCategories")
                        .WithMany("SolariumAppointment")
                        .HasForeignKey("SolariumCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Filial");

                    b.Navigation("SolariumCategories");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumCategories", b =>
                {
                    b.HasOne("Entity.Concrete.SolariumCategories", "MainCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("MainCategoryId");

                    b.Navigation("MainCategory");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumUsingList", b =>
                {
                    b.HasOne("Entity.Concrete.SolariumAppointment", "SolariumAppointment")
                        .WithMany("SolariumUsingList")
                        .HasForeignKey("SolariumAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SolariumAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.Stock", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.Filial", "Filial")
                        .WithMany("Stock")
                        .HasForeignKey("FilialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AppUser");

                    b.Navigation("Filial");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entity.Concrete.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingMaster", b =>
                {
                    b.Navigation("Masters");
                });

            modelBuilder.Entity("Entity.Concrete.BodyShapingPacketCategory", b =>
                {
                    b.Navigation("BodyShapingPacketsReports");

                    b.Navigation("ChildCategory");
                });

            modelBuilder.Entity("Entity.Concrete.BodyshapingAppointment", b =>
                {
                    b.Navigation("BodyShapingPacketReports");

                    b.Navigation("BodyShapingSessionLists");
                });

            modelBuilder.Entity("Entity.Concrete.Cosmetologs", b =>
                {
                    b.Navigation("CosmetologAppointments");
                });

            modelBuilder.Entity("Entity.Concrete.Customer", b =>
                {
                    b.Navigation("BodyshapingAppointments");

                    b.Navigation("LazerAppointments");

                    b.Navigation("SolariumAppointments");
                });

            modelBuilder.Entity("Entity.Concrete.Filial", b =>
                {
                    b.Navigation("AppUser");

                    b.Navigation("BodyShapingAppointments");

                    b.Navigation("BodyShapingMasters");

                    b.Navigation("CosmetologyAppointment");

                    b.Navigation("CosmetologyAppointments");

                    b.Navigation("Income");

                    b.Navigation("Kassa");

                    b.Navigation("LazerAppointments");

                    b.Navigation("LazerMasters");

                    b.Navigation("OutMoney");

                    b.Navigation("SolariumAppointments");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Entity.Concrete.Kassa", b =>
                {
                    b.Navigation("KassaActionLists");
                });

            modelBuilder.Entity("Entity.Concrete.LazerAppointment", b =>
                {
                    b.Navigation("LazerAppointmentReports");
                });

            modelBuilder.Entity("Entity.Concrete.LazerCategory", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("LazerAppointmentReports");
                });

            modelBuilder.Entity("Entity.Concrete.LazerMaster", b =>
                {
                    b.Navigation("LazerAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumAppointment", b =>
                {
                    b.Navigation("SolariumUsingList");
                });

            modelBuilder.Entity("Entity.Concrete.SolariumCategories", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("SolariumAppointment");
                });

            modelBuilder.Entity("Entity.Concrete.Stock", b =>
                {
                    b.Navigation("Incomes");
                });
#pragma warning restore 612, 618
        }
    }
}
